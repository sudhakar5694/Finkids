function uiCodemirrorDirective($timeout,uiCodemirrorConfig){"use strict";return{restrict:"EA",require:"?ngModel",compile:function(){if(angular.isUndefined(window.CodeMirror))throw new Error("ui-codemirror needs CodeMirror to work... (o rly?)");return postLink}};function postLink(scope,iElement,iAttrs,ngModel){scope.handles=[];var codemirrorOptions=angular.extend({value:iElement.text()},uiCodemirrorConfig.codemirror||{},scope.$eval(iAttrs.uiCodemirror),scope.$eval(iAttrs.uiCodemirrorOpts)),codemirror=function(iElement,codemirrorOptions){var codemirrot;codemirrot="TEXTAREA"===iElement[0].tagName?window.CodeMirror.fromTextArea(iElement[0],codemirrorOptions):(iElement.html(""),new window.CodeMirror(function(cm_el){iElement.append(cm_el)},codemirrorOptions));return codemirrot}(iElement,codemirrorOptions);!function(codemirrot,uiCodemirrorAttr,scope){if(!uiCodemirrorAttr)return;var codemirrorDefaultsKeys=Object.keys(window.CodeMirror.defaults);scope.handles.push(scope.$watch(uiCodemirrorAttr,function(newValues,oldValue){angular.isObject(newValues)&&codemirrorDefaultsKeys.forEach(function(key){if(newValues.hasOwnProperty(key)){if(oldValue&&newValues[key]===oldValue[key])return;codemirrot.setOption(key,newValues[key])}})},!0))}(codemirror,iAttrs.uiCodemirror||iAttrs.uiCodemirrorOpts,scope),function(codemirror,ngModel,scope){if(!ngModel)return;ngModel.$formatters.push(function(value){if(angular.isUndefined(value)||null===value)return"";if(angular.isObject(value)||angular.isArray(value))throw new Error("ui-codemirror cannot use an object or an array as a model");return value}),ngModel.$render=function(){var safeViewValue=ngModel.$viewValue||"";codemirror.setValue(safeViewValue)},codemirror.on("change",function(instance){var newValue=instance.getValue();newValue!==ngModel.$viewValue&&scope.$evalAsync(function(){ngModel.$setViewValue(newValue)})})}(codemirror,ngModel,scope),function(codeMirror,uiRefreshAttr,scope){if(!uiRefreshAttr)return;scope.handles.push(scope.$watch(uiRefreshAttr,function(newVal,oldVal){newVal!==oldVal&&$timeout(function(){codeMirror.refresh()})}))}(codemirror,iAttrs.uiRefresh,scope),scope.handles.push(scope.$on("CodeMirror",function(event,callback){if(!angular.isFunction(callback))throw new Error("the CodeMirror event requires a callback function");callback(codemirror)})),angular.isFunction(codemirrorOptions.onLoad)&&codemirrorOptions.onLoad(codemirror),scope.handles.push(scope.$on("$destroy",function(){angular.forEach(scope.handles,function(unbind){unbind()}),scope.handles=null}))}}angular.module("ui.codemirror",[]).constant("uiCodemirrorConfig",{}).directive("uiCodemirror",uiCodemirrorDirective);